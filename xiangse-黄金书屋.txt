#香色闺阁书源

黄金书屋
https://www.dduxs.com
权重: 9000

httpHeaders: 
{'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36'}

搜索:

请求: /search.html

@js:
let url = "/search.php";
let timestamp = new Date().getTime() - Math.floor(2 + Math.random() * 8) * 60 * 1000;
let curTime = Math.round(timestamp / 1000);
let expireTime = Math.round((timestamp + 49.4 * 3600 * 1000) / 1000);
let hp = {};
hp.q = params.keyWord;
hp.offset = params.offset;
hp.length = 30;
let hh = {
    'Accept': 'application/json, text/javascript, */*; q=0.01',
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    'Host': 'www.dduxs.com',
    'Origin': 'https://www.dduxs.com',
    'Referer': 'https://www.dduxs.com/search.html?s=' + encodeURIComponent(hp.q),
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36',
    'Cookie': 'Hm_lvt_25d1bfa082fcab30debd9ada31a870d3=' + curTime + ',' + expireTime + '; Hm_lpvt_25d1bfa082fcab30debd9ada31a870d3=' + Math.round(new Date().getTime() / 1000)
}
return {url: url, httpParams: hp, httpHeaders: hh, POST: true};


格式: json

js手动解析:
function functionName(config, params, result) {
    let list = [];
    if (result.code == 200) {
        let search = result.data.search;
        search.forEach((item, index, array) => {
            let bookInfo = {};
            let id = item.site_book_id;
            bookInfo.bookName = item.book_name;
            if (item.author.indexOf("<b style=\"color:red\">") > -1) {
                bookInfo.author = item.author.replace("<b style=\"color:red\">", "").replace("</b>", "");
            } else {
                bookInfo.author = item.author;
            }
            bookInfo.cover = "/img/" + Math.floor(id / 1000) + "/" + id + ".jpg";
            bookInfo.desc = "";
            bookInfo.cat = "";
            bookInfo.status = item.status;
            bookInfo.wordCount = "";
            bookInfo.lastChapterTitle = item.lastchapter;
            bookInfo.detailUrl = "/read/" + id + "/";
            list.push(bookInfo);
        })
    }

    return {"list": list, "more": false};
}

书籍详情:
书名: //div[@class="book-describe"]/h1[1]/text()
作者: //div[@class="book-describe"]/p[1]/a/text()
图标: //div[@class="book-img"]/img/@data-original
简介: //div[@class="book-describe"]/p[last()]/text()
类别: //div[@class="book-describe"]/p[2]/text()
状态: //div[@class="book-describe"]/p[3]/font/text()
字数: //div[@class="book-describe"]/p[4]/text()|@js: return parseFloat(result.replace("万字", "")) * 10000
最后一章: //div[@class="book-describe"]/p[6]/a/text()


章节列表:
// 字符串 js手动解析:

function functionName(config, params, result) {
    function Base64Decode() {
        let _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        this.decode = function (input) {
            let output = "";
            let chr1, chr2, chr3;
            let enc1, enc2, enc3, enc4;
            let i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            while (i < input.length) {
                enc1 = _keyStr.indexOf(input.charAt(i++));
                enc2 = _keyStr.indexOf(input.charAt(i++));
                enc3 = _keyStr.indexOf(input.charAt(i++));
                enc4 = _keyStr.indexOf(input.charAt(i++));
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
                output = output + String.fromCharCode(chr1);
                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2)
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3)
                }
            }
            output = _utf8_decode(output);
            return output
        };

        let _utf8_decode = function (utftext) {
            let string = "";
            let i = 0;
            let c, c2, c3;
            c = 0;
            while (i < utftext.length) {
                c = utftext.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++
                } else {
                    if ((c > 191) && (c < 224)) {
                        c2 = utftext.charCodeAt(i + 1);
                        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                        i += 2
                    } else {
                        c2 = utftext.charCodeAt(i + 1);
                        c3 = utftext.charCodeAt(i + 2);
                        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                        i += 3
                    }
                }
            }
            return string
        }
    }

    let detailUrl = params.queryInfo.detailUrl;
    let list = [];
    let startTag = "var chapters = JSON.parse(base.decode('";
    let endTag = "'));\n";
    let index1 = result.indexOf(startTag);
    let index2 = result.lastIndexOf(endTag);
    if (index1 === -1 || index2 === -1) {
        return {list: list};
    }
    let targetStr = result.substring(index1 + startTag.length, index2);
    let base = new Base64Decode();
    let chapters = JSON.parse(base.decode(targetStr));
    for (let key in chapters) {
        let chapterInfo = {};
        chapterInfo.title = chapters[key].name;
        chapterInfo.url = detailUrl + chapters[key].index + ".html";
        list.push(chapterInfo);
    }
    return {list: list};
}


内容:
// 字符串 js手动解析:

function functionName(config, params, result) {
    function Base64Decode() {
        let _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        this.decode = function (input) {
            let output = "";
            let chr1, chr2, chr3;
            let enc1, enc2, enc3, enc4;
            let i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            while (i < input.length) {
                enc1 = _keyStr.indexOf(input.charAt(i++));
                enc2 = _keyStr.indexOf(input.charAt(i++));
                enc3 = _keyStr.indexOf(input.charAt(i++));
                enc4 = _keyStr.indexOf(input.charAt(i++));
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
                output = output + String.fromCharCode(chr1);
                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2)
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3)
                }
            }
            output = _utf8_decode(output);
            return output
        };

        let _utf8_decode = function (utftext) {
            let string = "";
            let i = 0;
            let c, c2, c3;
            c = 0;
            while (i < utftext.length) {
                c = utftext.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++
                } else {
                    if ((c > 191) && (c < 224)) {
                        c2 = utftext.charCodeAt(i + 1);
                        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                        i += 2
                    } else {
                        c2 = utftext.charCodeAt(i + 1);
                        c3 = utftext.charCodeAt(i + 2);
                        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                        i += 3
                    }
                }
            }
            return string
        }
    }

    let startTag = "var content = base.decode('";
    let endTag = "');\n";
    let index1 = result.indexOf(startTag);
    let index2 = result.lastIndexOf(endTag);
    if (index1 === -1 || index2 === -1) {
        return undefined;
    }
    let targetStr = result.substring(index1 + startTag.length, index2);
    let base = new Base64Decode();
    let content = base.decode(targetStr);
    content = content.replace("<p>", "").replace("</p>", "\n");

    return {content: content};
}


分类:

1. 分类

请求信息: /category/%@filter/

列表: //div[@class="pop-books2 clearfix"]/ol/li
书名: //a[2]/h2/text()
作者: 
图标: //a[1]/img/@data-original
简介:
类别: 
状态: 
字数: 
最后一章: 
详情页地址: //a[2]/@href

moreKeys: 
{
  "requestFilters": [
    {
      "key": "filter",
      "items": [
        {
          "title": "起点热度书",
          "value": "1"
        },
        {
          "title": "纵横热度书",
          "value": "2"
        },
        {
          "title": "影视剧小说",
          "value": "3"
        },
        {
          "title": "中文经典",
          "value": "4"
        },
        {
          "title": "金庸作品集",
          "value": "5"
        }
      ]
    }
  ]
}
